{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","borderTop","height","margin","padding","children","App","onSearchChange","event","setState","searchfield","currentTarget","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0MAqBeA,EAZ6B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC1D,OACE,uBAAKC,UAAU,uDACb,uBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,2BACE,0BAAKF,GACL,yBAAIC,MCSGK,EAnBE,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,OAClB,OACE,2BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,gBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCIhBW,EAbG,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,aACnB,OACE,uBAAKV,UAAU,OACb,yBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCKHI,EAZA,SAACC,GACd,OACE,uBAAKC,MAAO,CACVC,SAAU,SAAUC,UAAW,qBAAsBC,OAAQ,OAC7DC,OAAQ,QACRC,QAAS,UAERN,EAAMO,WC6CEC,G,wDArCb,WAAYR,GAAmB,IAAD,8BAC5B,cAAMA,IAaRS,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,cAAcC,SAbjD,EAAKC,MAAQ,CACX1B,OAAQ,GACRuB,YAAa,IAJa,E,gEAQT,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,EAAKT,SAAS,CAAEtB,OAAQ+B,S,+BAOtB,IAAD,EACYC,KAAKN,MAA7B1B,EADY,EACZA,OAAQuB,EADI,EACJA,YACVU,EAAiBjC,EAAOkC,QAAO,SAAAC,GACnC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASd,EAAYa,kBAEvD,OAAQpC,EAAOsC,OAGX,uBAAK1C,UAAU,MACb,sBAAIA,UAAU,MAAd,eACA,gBAAC,EAAD,CAAWU,aAAc0B,KAAKZ,iBAC9B,gBAAC,EAAD,KACE,gBAAC,EAAD,CAAUpB,OAAQiC,MANxB,yC,GAzBYM,cCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,SACI,gBAAC,EAAD,MACFC,SAASC,eAAe,SDmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f66a021b.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface CardStatelessProps {\n  name: string,\n  email: string,\n  id: number\n}\n\n\nconst Card: React.SFC<CardStatelessProps> = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import * as React from 'react';\n\nimport Card from './Card';\nimport { IRobot } from \"../containers/App\"\n\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import * as React from 'react';\n\ninterface ISearchBoxProps {\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void\n}\n\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import * as React from 'react';\n\ntype Props = {\n  children?: JSX.Element\n}\n\nconst Scroll = (props: Props) => {\n  return (\n    <div style={{\n      overflow: 'scroll', borderTop: '5px solid deepPink', height: \"80vh\",\n      margin: \"5vh 0\",\n      padding: \"5vh 0\",\n    }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import * as React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nexport interface IRobot {\n  name: string;\n  id: number;\n  email: string;\n}\n\ninterface IAppProps {\n}\n\ninterface IAppState {\n  robots: Array<IRobot>;\n  searchfield: string;\n}\n\nclass App extends React.Component<IAppProps, IAppState> {\n  constructor(props: IAppProps) {\n    super(props)\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => { this.setState({ robots: users }) });\n  }\n\n  onSearchChange = (event: React.SyntheticEvent<HTMLInputElement>): void => {\n    this.setState({ searchfield: event.currentTarget.value })\n  }\n\n  render(): JSX.Element {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root') as HTMLElement\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}